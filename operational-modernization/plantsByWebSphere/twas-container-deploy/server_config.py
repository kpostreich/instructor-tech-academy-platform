# wsadmin script generated by binaryAppScanner
# This configuration was migrated on 5/2/22 at 8:56:13 AM from the following location: /opt/IBM/WebSphere/AppServer85515/profiles/AppSrv01
# The binary scanner does not support the migration of all WebSphere traditional configuration elements. Check the binary scanner documentation for the list of supported configuration elements.

Cell=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/')
Node=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/Node:' + AdminControl.getNode() + '/')
Server=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/Node:' + AdminControl.getNode() + '/Server:server1')
NodeName=AdminControl.getNode()

# The following variables are used to replace sensitive data in the configuration for the application.
# The values for these variables were not collected because the includeSensitiveData option was not specified.
# ============================================================
TradeAdminAuthData_password_1=''
TradeAdminAuthData_user_1=''
TradeDataSourceAuthData_password_1=''
TradeDataSourceAuthData_user_1=''
# ============================================================

print 'Starting Creating JVM Properties'
# Properties are migrated from server studentNode01/tWAS_85515_server.
AdminTask.setJVMSystemProperties(["-propertyName", "openjpa.jdbc.DBDictionary", "-propertyValue", "db2"])

print 'Starting Creating Authentication Alias'
GlobalSecurityVar=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/' + 'Security:/')
AdminConfig.create('JAASAuthData', GlobalSecurityVar, [['alias', 'TradeAdminAuthData'], ['description', ''], ['password', TradeAdminAuthData_password_1], ['userId', TradeAdminAuthData_user_1]])
AdminConfig.create('JAASAuthData', GlobalSecurityVar, [['alias', 'TradeDataSourceAuthData'], ['description', ''], ['password', TradeDataSourceAuthData_password_1], ['userId', TradeDataSourceAuthData_user_1]])

print 'Starting Creating Queues'
AdminTask.createSIBus(["-bus", "studentNode01", "-busSecurity", "false"])
AdminTask.addSIBusMember(["-fileStore", "", "-node", NodeName, "-bus", "studentNode01", "-server", "server1"])
AdminTask.createSIBDestination(["-bus", "studentNode01", "-name", "Trade.Topic.Space", "-type", "TopicSpace", "-node", NodeName, "-server", "server1"])
AdminTask.createSIBDestination(["-bus", "studentNode01", "-name", "TradeBrokerJSD", "-type", "Queue", "-node", NodeName, "-server", "server1"])
AdminTask.createSIBJMSQueue(Node, ["-name", "TradeBrokerQueue", "-jndiName", "jms/TradeBrokerQueue", "-queueName", "TradeBrokerJSD", "-deliveryMode", "NonPersistent"])

print 'Starting Creating Topics'
AdminTask.createSIBJMSTopic(Node, ["-name", "TradeStreamerTopic", "-jndiName", "jms/TradeStreamerTopic", "-topicName", "TradeStreamerTopic", "-topicSpace", "Trade.Topic.Space", "-deliveryMode", "NonPersistent"])

print 'Starting Creating Activation Specifications'
AdminTask.createSIBJMSActivationSpec(Node, ["-name", "TradeBrokerMDB", "-jndiName", "eis/TradeBrokerMDB", "-destinationJndiName", "jms/TradeBrokerQueue", "-authenticationAlias", "TradeAdminAuthData", "-destinationType", "javax.jms.Queue", "-busName", "studentNode01"])
AdminTask.createSIBJMSActivationSpec(Node, ["-name", "TradeStreamerMDB", "-jndiName", "eis/TradeStreamerMDB", "-destinationJndiName", "jms/TradeStreamerTopic", "-authenticationAlias", "TradeAdminAuthData", "-destinationType", "javax.jms.Topic", "-busName", "studentNode01"])

print 'Starting Creating Connection Factories'
AdminConfigVar_7=AdminTask.createSIBJMSConnectionFactory(Node, ["-name", "TradeBrokerQCF", "-jndiName", "jms/TradeBrokerQCF", "-busName", "studentNode01", "-type", "queue", "-authDataAlias", "TradeAdminAuthData"])
AdminConfig.create('MappingModule', AdminConfigVar_7, [['mappingConfigAlias', 'DefaultPrincipalMapping']])
AdminConfigVar_8=AdminConfig.showAttribute(AdminConfigVar_7, 'connectionPool')
AdminConfig.modify(AdminConfigVar_8, [['stuckThreshold', '0'], ['reapTime', '180'], ['testConnectionInterval', '0'], ['connectionTimeout', '180'], ['surgeCreationInterval', '0'], ['surgeThreshold', '-1'], ['stuckTimerTime', '0'], ['numberOfFreePoolPartitions', '0'], ['minConnections', '1'], ['unusedTimeout', '1800'], ['agedTimeout', '0'], ['numberOfSharedPoolPartitions', '0'], ['purgePolicy', 'EntirePool'], ['maxConnections', '10'], ['freePoolDistributionTableSize', '0'], ['stuckTime', '0'], ['testConnection', 'false'], ['numberOfUnsharedPoolPartitions', '0']])
AdminConfigVar_9=AdminTask.createSIBJMSConnectionFactory(Node, ["-name", "TradeStreamerTCF", "-jndiName", "jms/TradeStreamerTCF", "-busName", "studentNode01", "-type", "topic", "-authDataAlias", "TradeAdminAuthData"])
AdminConfig.create('MappingModule', AdminConfigVar_9, [['mappingConfigAlias', 'DefaultPrincipalMapping']])
AdminConfigVar_10=AdminConfig.showAttribute(AdminConfigVar_9, 'connectionPool')
AdminConfig.modify(AdminConfigVar_10, [['stuckThreshold', '0'], ['reapTime', '180'], ['testConnectionInterval', '0'], ['connectionTimeout', '180'], ['surgeCreationInterval', '0'], ['surgeThreshold', '-1'], ['stuckTimerTime', '0'], ['numberOfFreePoolPartitions', '0'], ['minConnections', '1'], ['unusedTimeout', '1800'], ['agedTimeout', '0'], ['numberOfSharedPoolPartitions', '0'], ['purgePolicy', 'EntirePool'], ['maxConnections', '10'], ['freePoolDistributionTableSize', '0'], ['stuckTime', '0'], ['testConnection', 'false'], ['numberOfUnsharedPoolPartitions', '0']])

print 'Starting Creating JDBC Providers'
AdminConfigVar_0=AdminConfig.create('JDBCProvider', Node, [['classpath', '/home/student/demo-resources/db2-drivers/db2jcc.jar;/home/student/demo-resources/db2-drivers/db2jcc_license_cu.jar'], ['description', 'minVer null - maxVer null - Two-phase commit DB2 JCC provider that supports JDBC 3.0. Data sources that use this provider support the use of XA to perform 2-phase commit processing. Use of driver type 2 on the application server for z/OS is not supported for data sources created under this provider.'], ['implementationClassName', 'com.ibm.db2.jcc.DB2XADataSource'], ['name', 'DB2_Universal_JDBC_Driver_Provider_Only_(XA)'], ['providerType', 'DB2 Universal JDBC Driver Provider (XA)'], ['xa', 'true']])
AdminConfigVar_1=AdminTask.createDatasource(AdminConfigVar_0, ["-name", "NoTxTradeDataSource", "-jndiName", "jdbc/NoTxTradeDataSource", "-dataStoreHelperClassName", "com.ibm.websphere.rsadapter.DB2UniversalDataStoreHelper", "-componentManagedAuthenticationAlias", "TradeDataSourceAuthData", "-xaRecoveryAuthAlias", "TradeDataSourceAuthData", "-configureResourceProperties", "[[databaseName java.lang.String tradedb] [driverType java.lang.Integer 4] [serverName java.lang.String localhost] [portNumber java.lang.Integer 50000] ]"])
AdminConfigVar_2=AdminConfig.showAttribute(AdminConfigVar_1, 'propertySet')
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'beginTranForResultSetScrollingAPIs'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'beginTranForVendorAPIs'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'connectionSharing'], ['type', 'java.lang.Integer'], ['value', '1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'deferPrepares'], ['type', 'java.lang.Boolean'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'enableClientInformation'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'enableMultithreadedAccessDetection'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'errorDetectionModel'], ['type', 'java.lang.String'], ['value', 'ExceptionMapping']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'fullyMaterializeLobData'], ['type', 'java.lang.Boolean'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'loginTimeout'], ['type', 'java.lang.Integer'], ['value', '0']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'name'], ['type', 'java.lang.String'], ['value', 'NoTxTradeDataSource']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'nonTransactionalDataSource'], ['type', 'java.lang.Boolean'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'preTestSQLString'], ['type', 'java.lang.String'], ['value', 'SELECT CURRENT SQLID FROM SYSIBM.SYSDUMMY1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'propagateClientIdentityUsingTrustedContext'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'readOnly'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'reauthentication'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'resultSetHoldability'], ['type', 'java.lang.Integer'], ['value', '2']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'retrieveMessagesFromServerOnGetMessage'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'traceFileAppend'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'traceLevel'], ['type', 'java.lang.Integer'], ['value', '-1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'unbindClientRerouteListFromJndi'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'useTransactionRedirect'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'validateNewConnection'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'validateNewConnectionRetryCount'], ['type', 'java.lang.Integer'], ['value', '100']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'validateNewConnectionRetryInterval'], ['type', 'java.lang.Long'], ['value', '3']])
AdminConfigVar_3=AdminConfig.showAttribute(AdminConfigVar_1, 'connectionPool')
AdminConfig.modify(AdminConfigVar_3, [['reapTime', '180'], ['connectionTimeout', '180'], ['minConnections', '10'], ['unusedTimeout', '1800'], ['agedTimeout', '0'], ['purgePolicy', 'EntirePool'], ['maxConnections', '50']])
AdminConfigVar_4=AdminTask.createDatasource(AdminConfigVar_0, ["-name", "TradeDataSource", "-jndiName", "jdbc/TradeDataSource", "-dataStoreHelperClassName", "com.ibm.websphere.rsadapter.DB2UniversalDataStoreHelper", "-componentManagedAuthenticationAlias", "TradeDataSourceAuthData", "-xaRecoveryAuthAlias", "TradeDataSourceAuthData", "-configureResourceProperties", "[[databaseName java.lang.String tradedb] [driverType java.lang.Integer 4] [serverName java.lang.String localhost] [portNumber java.lang.Integer 50000] ]"])
AdminConfigVar_5=AdminConfig.showAttribute(AdminConfigVar_4, 'propertySet')
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'beginTranForResultSetScrollingAPIs'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'beginTranForVendorAPIs'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'connectionSharing'], ['type', 'java.lang.Integer'], ['value', '1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'deferPrepares'], ['type', 'java.lang.Boolean'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'enableClientInformation'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'enableMultithreadedAccessDetection'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'errorDetectionModel'], ['type', 'java.lang.String'], ['value', 'ExceptionMapping']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'fullyMaterializeLobData'], ['type', 'java.lang.Boolean'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'loginTimeout'], ['type', 'java.lang.Integer'], ['value', '0']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'name'], ['type', 'java.lang.String'], ['value', 'TradeDataSource']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'nonTransactionalDataSource'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'preTestSQLString'], ['type', 'java.lang.String'], ['value', 'SELECT CURRENT SQLID FROM SYSIBM.SYSDUMMY1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'propagateClientIdentityUsingTrustedContext'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'readOnly'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'reauthentication'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'resultSetHoldability'], ['type', 'java.lang.Integer'], ['value', '2']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'retrieveMessagesFromServerOnGetMessage'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'traceFileAppend'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'traceLevel'], ['type', 'java.lang.Integer'], ['value', '-1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'unbindClientRerouteListFromJndi'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'useTransactionRedirect'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'validateNewConnection'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'validateNewConnectionRetryCount'], ['type', 'java.lang.Integer'], ['value', '100']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_5, [['name', 'validateNewConnectionRetryInterval'], ['type', 'java.lang.Long'], ['value', '3']])
AdminConfigVar_6=AdminConfig.showAttribute(AdminConfigVar_4, 'connectionPool')
AdminConfig.modify(AdminConfigVar_6, [['reapTime', '180'], ['connectionTimeout', '180'], ['minConnections', '10'], ['unusedTimeout', '1800'], ['agedTimeout', '0'], ['purgePolicy', 'EntirePool'], ['maxConnections', '50']])

print 'Starting Creating Variables'

print 'Starting Saving Configuration Changes Before Application Deployment'
AdminConfig.save()
print 'Starting Application Deployment'
AdminConfig.create('Library', Server, [['name', 'globalSharedLibrary'], ['classPath',  '/work/config/lib']])
appServer = AdminConfig.list('ApplicationServer',Server)
classLoader1 = AdminConfig.create('Classloader', appServer, [['mode',  'PARENT_FIRST']])
AdminConfig.create('LibraryRef', classLoader1, [['libraryName', 'globalSharedLibrary']])
#AdminApp.install('/path/to/DayTrader2-EE5.ear', ["-node", NodeName, "-server", "server1", "-appname", "DayTrader2-EE5.ear", "-BindJndiForEJBMessageBinding", [["DayTrader Enterprise Bean Definitions", "DTBroker3MDB", "dt-ejb.jar,META-INF/ejb-jar.xml", "", "eis/TradeBrokerMDB", "jms/TradeBrokerQueue", "TradeAdminAuthData"], ["DayTrader Enterprise Bean Definitions", "DTStreamer3MDB", "dt-ejb.jar,META-INF/ejb-jar.xml", "", "eis/TradeStreamerMDB", "jms/TradeStreamerTopic", "TradeAdminAuthData"]], "-CtxRootForWebMod", [["DayTrader Web", "web.war,WEB-INF/web.xml", "/daytrader"]]])
AdminConfig.save()